{
  "notes": [
    {
      "title": "React - Props",
      "content": "Props are data I can send to a component. You can send any kind of data : Objects, strings, numbers, arrays, jsx...\nYou can never modify a props directly they are read-only. Any time a component props changes the component re-render.\n\nExample : \n\n<Component myProps=\"This is a props\" />",
      "created_at": "23/08/2022",
      "id": 2
    },
    {
      "title": "React - States",
      "content": "A state is a data managed by a component. Any time a component state changes the component re-render",
      "created_at": "23/08/2022",
      "id": 5
    },
    {
      "title": "React - useEffect() ",
      "content": "The function passed to useEffect will run after the first render is committed to the screen.\nYou can pass an array as second parameter. useEffect() will run anytime a value in this array change.\nYou can return a function in useEffect() that will be executed when the component is removed from the DOM\n\nExample\n\nuseEffect( () => {\n   console.log(\"Run on first render\")\n}, [])\n\nuseEffect( () => {\n   console.log(\"Run on first render and when valueToListen changes\")\n}, [valueToListen])\n\nuseEffect( () => {\n   console.log(\"Run on first render\")\n   return () =>{\n        console.log(\"Run when component is removed from the DOM\")\n    }\n}, [])",
      "created_at": "23/08/2022",
      "id": 8
    },
    {
      "title": "Javascript - Destructuring",
      "content": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. \n\nExample :\n\nlet a, b, rest;\n[a, b] = [10, 20];\n\nconsole.log(a);\n// expected output: 10\n\nconsole.log(b);\n// expected output: 20\n\n[a, b, ...rest] = [10, 20, 30, 40, 50];\n\nconsole.log(rest);\n// expected output: Array [30,40,50]\n",
      "created_at": "13/10/2022",
      "id": 10
    }
  ]
}